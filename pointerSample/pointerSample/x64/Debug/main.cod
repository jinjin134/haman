; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	buf:BYTE:064H
_DATA	ENDS
msvcjmc	SEGMENT
__7424102C_concurrencysal@h DB 01H
__7D4DA4FA_sal@h DB 01H
__0FC31696_vadefs@h DB 01H
__B56ADB44_vcruntime@h DB 01H
__04C75F1C_corecrt@h DB 01H
__C44F8F6B_corecrt_stdio_config@h DB 01H
__A7F89B2B_corecrt_wstdio@h DB 01H
__B5C48800_stdio@h DB 01H
__494656A0_corecrt_malloc@h DB 01H
__E5D9469F_malloc@h DB 01H
__B73B4790_main@c DB 01H
msvcjmc	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	MemoryDump
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_08JCOLBOH@0x?$CF02x?5?5@			; `string'
PUBLIC	__real@40000000
PUBLIC	__real@40091eb851eb851f
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MemoryDump DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$MemoryDump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@40091eb851eb851f
CONST	SEGMENT
__real@40091eb851eb851f DQ 040091eb851eb851fr	; 3.14
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_08JCOLBOH@0x?$CF02x?5?5@
CONST	SEGMENT
??_C@_08JCOLBOH@0x?$CF02x?5?5@ DB '0x%02x  ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025051701H
	DD	01122317H
	DD	0700b0039H
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0b2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MemoryDump DD 025053f19H
	DD	01112316H
	DD	0700a002dH
	DD	05009H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MemoryDump$rtcName$0 DB 063H
	DB	00H
	ORG $+14
MemoryDump$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:MemoryDump$rtcName$0
	ORG $+48
MemoryDump$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MemoryDump$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	0a6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\gujinseonwork\c\pointerSample\pointerSample\main.c
;	COMDAT main
_TEXT	SEGMENT
start$ = 4
length$ = 36
c$ = 68
i$ = 100
a$ = 132
d$ = 168
p$ = 200
argc$ = 448
argv$ = 456
main	PROC						; COMDAT

; 11   : {	int start = 0x09000000;

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B73B4790_main@c
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	c7 45 04 00 00
	00 09		 mov	 DWORD PTR start$[rbp], 150994944 ; 09000000H

; 12   : 	int length = 500;

  0002a	c7 45 24 f4 01
	00 00		 mov	 DWORD PTR length$[rbp], 500 ; 000001f4H

; 13   : 
; 14   : 
; 15   : 	char c = 'A';    // %c

  00031	c6 45 44 41	 mov	 BYTE PTR c$[rbp], 65	; 00000041H

; 16   : 	int i = 1;       // %d

  00035	c7 45 64 01 00
	00 00		 mov	 DWORD PTR i$[rbp], 1

; 17   : 	float a = 2.0;   // %f

  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00044	f3 0f 11 85 84
	00 00 00	 movss	 DWORD PTR a$[rbp], xmm0

; 18   : 	double d = 3.14; // %f

  0004c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40091eb851eb851f
  00054	f2 0f 11 85 a8
	00 00 00	 movsd	 QWORD PTR d$[rbp], xmm0

; 19   : 	void *p = malloc(100);//(void*)buf; 

  0005c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00067	48 89 85 c8 00
	00 00		 mov	 QWORD PTR p$[rbp], rax

; 20   : 
; 21   : 	*(double *)p = d;

  0006e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  00075	f2 0f 10 85 a8
	00 00 00	 movsd	 xmm0, QWORD PTR d$[rbp]
  0007d	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 22   : 	MemoryDump((int)buf, length);

  00081	8b 55 24	 mov	 edx, DWORD PTR length$[rbp]
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:buf
  0008b	8b c8		 mov	 ecx, eax
  0008d	e8 00 00 00 00	 call	 MemoryDump

; 23   : 
; 24   : 	//printf("c = %8c [0x%8x]\n", c, &c); //변수값 ,[변수의 주소]
; 25   : 	//printf("i = %8d [0x%8x]\n", i, &i);
; 26   : 	//printf("f = %8f [0x%8x]\n", a, &a);
; 27   : 	//printf("d = %8f [0x%8x]\n", d, &d);
; 28   : 	//printf("p = %8f [0x%8x]\n", *(double*)p, p);
; 29   : }

  00092	33 c0		 xor	 eax, eax
  00094	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  0009b	5f		 pop	 rdi
  0009c	5d		 pop	 rbp
  0009d	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\gujinseonwork\c\pointerSample\pointerSample\main.c
;	COMDAT MemoryDump
_TEXT	SEGMENT
vp$ = 8
i$ = 36
cp$4 = 72
c$5 = 100
__$ArrayPad$ = 312
start$ = 352
length$ = 360
MemoryDump PROC						; COMDAT

; 33   : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001b	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR [rsp+392]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c5	 xor	 rax, rbp
  00038	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B73B4790_main@c
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 34   : 	void *vp = (void *)start;

  0004b	48 63 85 60 01
	00 00		 movsxd	 rax, DWORD PTR start$[rbp]
  00052	48 89 45 08	 mov	 QWORD PTR vp$[rbp], rax

; 35   : 	int i = 0; //index 변수 초기값

  00056	c7 45 24 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
$LN2@MemoryDump:

; 36   : 
; 37   : 	while (i < length)    //수행조건 // for, do~while사용가능

  0005d	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR length$[rbp]
  00063	39 45 24	 cmp	 DWORD PTR i$[rbp], eax
  00066	7d 3a		 jge	 SHORT $LN3@MemoryDump

; 38   : 	{	
; 39   : 		char *cp = buf;

  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:buf
  0006f	48 89 45 48	 mov	 QWORD PTR cp$4[rbp], rax

; 40   : 		//char *cp = (char *)vp;
; 41   : 		//char c = *cp;
; 42   : 		//i++;
; 43   : 		unsigned char c = *((char *)cp + i);

  00073	48 63 45 24	 movsxd	 rax, DWORD PTR i$[rbp]
  00077	48 8b 4d 48	 mov	 rcx, QWORD PTR cp$4[rbp]
  0007b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007f	88 45 64	 mov	 BYTE PTR c$5[rbp], al

; 44   : 		printf("0x%02x  ", c, &c);

  00082	0f b6 45 64	 movzx	 eax, BYTE PTR c$5[rbp]
  00086	4c 8d 45 64	 lea	 r8, QWORD PTR c$5[rbp]
  0008a	8b d0		 mov	 edx, eax
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08JCOLBOH@0x?$CF02x?5?5@
  00093	e8 00 00 00 00	 call	 printf

; 45   : 		i++;

  00098	8b 45 24	 mov	 eax, DWORD PTR i$[rbp]
  0009b	ff c0		 inc	 eax
  0009d	89 45 24	 mov	 DWORD PTR i$[rbp], eax

; 46   : 	}

  000a0	eb bb		 jmp	 SHORT $LN2@MemoryDump
$LN3@MemoryDump:

; 47   : 
; 48   : }

  000a2	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:MemoryDump$rtcFrameData
  000ad	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b2	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000b9	48 33 cd	 xor	 rcx, rbp
  000bc	e8 00 00 00 00	 call	 __security_check_cookie
  000c1	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
MemoryDump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 248
_Format$ = 288
printf	PROC						; COMDAT

; 956  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 12 00 00 00	 mov	 ecx, 18
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5C48800_stdio@h
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00058	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  0005f	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00063	b9 01 00 00 00	 mov	 ecx, 1
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006e	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  00072	45 33 c0	 xor	 r8d, r8d
  00075	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Format$[rbp]
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	e8 00 00 00 00	 call	 _vfprintf_l
  00084	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 961  :         __crt_va_end(_ArgList);

  00087	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 962  :         return _Result;

  0008f	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 963  :     }

  00092	8b f8		 mov	 edi, eax
  00094	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  0009f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a4	8b c7		 mov	 eax, edi
  000a6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000ad	48 33 cd	 xor	 rcx, rbp
  000b0	e8 00 00 00 00	 call	 __security_check_cookie
  000b5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B5C48800_stdio@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002e	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00033	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _ArgList$[rbp]
  0003a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003f	4c 8b 8d f0 00
	00 00		 mov	 r9, QWORD PTR _Locale$[rbp]
  00046	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  0004d	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR _Stream$[rbp]
  00054	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C44F8F6B_corecrt_stdio_config@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
